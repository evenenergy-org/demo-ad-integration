name: 🚀 部署到测试服务器

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reason:
        description: '手动部署原因'
        required: false
        default: '手动触发部署'

env:
  # 应用配置
  APP_NAME: demo-ad-integration
  APP_VERSION: 1.0.0
  NODE_VERSION: '20'
  
  # Docker 配置
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
  # 服务器配置
  SERVER_HOST: ${{ secrets.TEST_SERVER_HOST }}
  SERVER_PORT: ${{ secrets.TEST_SERVER_PORT }}
  SERVER_USER: ${{ secrets.TEST_SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.TEST_SERVER_SSH_KEY }}
  DEPLOY_PATH: /home/${{ secrets.TEST_SERVER_USER }}/demo-ad-integration

jobs:
  build-and-deploy:
    name: 📦 构建并部署
    runs-on: ubuntu-latest
    
    steps:
      # ========================================
      # 步骤 1: 检出代码
      # ========================================
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # ========================================
      # 步骤 2: 设置 Node.js 环境
      # ========================================
      - name: 📦 设置 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # ========================================
      # 步骤 3: 安装 pnpm
      # ========================================
      - name: 📦 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
      
      # ========================================
      # 步骤 4: 缓存依赖
      # ========================================
      - name: 💾 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      # ========================================
      # 步骤 5: 安装依赖
      # ========================================
      - name: 📥 安装依赖
        run: |
          echo "📥 安装依赖..."
          pnpm install --frozen-lockfile
          echo "✅ 依赖安装完成"
      
      # ========================================
      # 步骤 6: 显示构建信息
      # ========================================
      - name: 📋 显示构建信息
        run: |
          echo "=================================="
          echo "🏗️  构建信息"
          echo "=================================="
          echo "📦 应用名称: ${{ env.APP_NAME }}"
          echo "🔢 版本号: ${{ env.APP_VERSION }}"
          echo "🌿 分支: ${{ github.ref_name }}"
          echo "📝 提交: ${{ github.sha }}"
          echo "👤 提交者: ${{ github.actor }}"
          echo "⏰ 构建时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=================================="
      
      # ========================================
      # 步骤 7: 设置 Docker Buildx
      # ========================================
      - name: 🐳 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
      
      # ========================================
      # 步骤 8: 登录 Docker Registry
      # ========================================
      - name: 🔐 登录 Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      # ========================================
      # 步骤 9: 构建并推送 Docker 镜像
      # ========================================
      - name: 🐳 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
      
      # ========================================
      # 步骤 10: 准备部署文件
      # ========================================
      - name: 📝 准备部署文件
        run: |
          echo "📝 准备部署文件..."
          mkdir -p deploy
          
          # 复制 docker-compose 文件
          cp docker-compose.yml deploy/
          
          # 创建环境变量文件
          cat > deploy/.env << EOF
          APP_NAME=${{ env.APP_NAME }}
          DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          IMAGE_TAG=${{ github.sha }}
          APP_VERSION=${{ env.APP_VERSION }}
          EOF
          
          echo "✅ 部署文件准备完成"
          ls -la deploy/
      
      # ========================================
      # 步骤 11: 配置 SSH
      # ========================================
      - name: 🔑 配置 SSH
        run: |
          echo "🔑 配置 SSH..."
          mkdir -p ~/.ssh
          echo "${{ env.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SERVER_PORT }} ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "✅ SSH 配置完成"
      
      # ========================================
      # 步骤 12: 上传部署文件到服务器
      # ========================================
      - name: 📤 上传部署文件到服务器
        run: |
          echo "📤 上传部署文件到服务器..."
          ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"
          scp -P ${{ env.SERVER_PORT }} -r deploy/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
          echo "✅ 部署文件上传完成"
      
      # ========================================
      # 步骤 13: 执行远程部署
      # ========================================
      - name: 🚀 执行远程部署
        run: |
          echo "=================================="
          echo "🚀 开始部署到服务器"
          echo "=================================="
          
          ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
            set -e
            cd ${{ env.DEPLOY_PATH }}
            
            echo "📋 当前部署信息："
            cat .env
            
            echo ""
            echo "🔐 登录 Docker Registry..."
            echo "${{ env.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.DOCKER_USERNAME }} --password-stdin
            
            echo ""
            echo "🔄 拉取最新镜像..."
            docker compose pull
            
            echo ""
            echo "⏹️  停止旧容器..."
            docker compose down --remove-orphans || true
            
            echo ""
            echo "🗑️  清理未使用的镜像..."
            docker image prune -f
            
            echo ""
            echo "🚀 启动新容器..."
            docker compose up -d
            
            echo ""
            echo "⏳ 等待服务启动..."
            sleep 10
            
            echo ""
            echo "📊 容器状态："
            docker compose ps
            
            echo ""
            echo "📝 最近日志："
            docker compose logs --tail=50
            
            echo ""
            echo "=================================="
            echo "✅ 部署完成！"
            echo "=================================="
          ENDSSH
      
      # ========================================
      # 步骤 14: 健康检查
      # ========================================
      - name: 🏥 健康检查
        run: |
          echo "🏥 执行健康检查..."
          sleep 5
          
          ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
            cd ${{ env.DEPLOY_PATH }}
            
            # 检查容器是否在运行
            if docker compose ps | grep -q "Up"; then
              echo "✅ 容器运行正常"
            else
              echo "❌ 容器未正常运行"
              docker compose logs --tail=100
              exit 1
            fi
            
            echo ""
            echo "🌐 检查端口 3000:"
            if ss -tln 2>/dev/null | grep -q ":3000" || netstat -tln 2>/dev/null | grep -q ":3000"; then
              echo "✅ 端口 3000 已监听"
            else
              echo "❌ 端口 3000 未监听"
              exit 1
            fi
          ENDSSH
      
      # ========================================
      # 步骤 15: 部署通知
      # ========================================
      - name: 📢 部署成功通知
        if: success()
        run: |
          echo "=================================="
          echo "✅ 部署成功！"
          echo "=================================="
          echo "📦 应用: ${{ env.APP_NAME }}"
          echo "🔢 版本: ${{ env.APP_VERSION }}"
          echo "🏷️  标签: ${{ github.sha }}"
          echo "🌿 分支: ${{ github.ref_name }}"
          echo "🔢 构建号: #${{ github.run_number }}"
          echo "👤 部署人: ${{ github.actor }}"
          echo "🌐 地址: http://${{ env.SERVER_HOST }}:3000"
          echo "⏰ 时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=================================="
      
      - name: 📢 部署失败通知
        if: failure()
        run: |
          echo "=================================="
          echo "❌ 部署失败！"
          echo "=================================="
          echo "📦 应用: ${{ env.APP_NAME }}"
          echo "🌿 分支: ${{ github.ref_name }}"
          echo "👤 操作人: ${{ github.actor }}"
          echo "⏰ 时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=================================="
          echo "请检查上述步骤的错误信息"

